#!/bin/sh

#
# Auto-rotation script
#
# Based on:
# https://gist.githubusercontent.com/ei-grad/4d9d23b1463a99d24a8d/raw/rotate.py
#

BASEDIR="$HOME/.convertible"
mkdir -p "$BASEDIR"

LOCKFILE="$BASEDIR/.autorot.lock"
ROTLOCK_FILE="$BASEDIR/.rotation-lock"

(
flock -n 9 || exit 1

OUTPUT="$(xrandr | grep -oP '^([A-Za-z0-9_-]+)(?= connected primary)')"
if [ -z "$OUTPUT" ]; then
    echo "Xrandr output not found" >&2
    exit 1
fi

if ! cat /sys/bus/iio/devices/iio\:device*/name | grep -q accel; then
    echo "Accellerator not found" >&2
    exit 1
fi

for dev in /sys/bus/iio/devices/iio\:device*; do
	[ -z "$(cat "$dev/name" | grep accel)" ] || break
done

scale=$(cat "$dev/in_accel_scale")
G=7 # (m^2 / s) sensibility, gravity trigger

input_devs=$(xinput list |
    grep -oP '(?<=â†³ )[A-Za-z0-9_: -]+?(?=\s*id=)' |
    grep -iP 'wacom|pen|stylus|finger|touch|trackpoint')

rotate() {
    rot=$1
    xrandr --output "$OUTPUT" --rotate $rot
    while read -r input_dev
    do
        if [ $rot = normal ]; then
            xinput set-prop "$input_dev" "Coordinate Transformation Matrix" 1 0 0 0 1 0 0 0 1
        elif [ $rot = right ]; then
            xinput set-prop "$input_dev" "Coordinate Transformation Matrix" 0 1 0 -1 0 1 0 0 1
        elif [ $rot = inverted ]; then
            xinput set-prop "$input_dev" "Coordinate Transformation Matrix" -1 0 1 0 -1 1 0 0 1
        elif [ $rot = left ]; then
            xinput set-prop "$input_dev" "Coordinate Transformation Matrix" 0 -1 1 1 0 0 0 0 1
        fi
    done <<<"$input_devs"
}

get_current() {
    orien="$(xrandr |
        grep -oP '^[A-Za-z0-9_-]+ connected primary [0-9x+]+ ([a-z]+)' |
        grep -oP '(right|inverted|left)$')"
    [ -z "$orien" ] && echo normal || echo $orien
}

first=true
state=$(get_current)
while true; do
    [ ! -f "$ROTLOCK_FILE" ] && echo unlocked > "$ROTLOCK_FILE"
    rotlock="$(cat "$ROTLOCK_FILE" | tr -d '\n' | sed 's/^\s*//;s/\s*$//')"
    current=$(get_current)

    if [ "$rotlock" != "locked" ]; then
        ax=$(cat "$dev/in_accel_x_raw")
        ay=$(cat "$dev/in_accel_y_raw")
        ax=$(echo "$ax * $scale" | bc)
        ay=$(echo "$ay * $scale" | bc)

        if ([ "$state" != normal ] || [ "$current" != normal ] || $first) && [ $(echo "$ay <= -$G" | bc) -gt 0 ]; then
            rotate normal
            "$BASEDIR/landscape"
            state=normal
        elif ([ "$state" != right ] || [ "$current" != right ] || $first) && [ $(echo "$ax <= -$G" | bc) -gt 0 ]; then
            rotate right
            "$BASEDIR/portrait"
            state=right
        elif ([ "$state" != inverted ] || [ "$current" != inverted ] || $first) && [ $(echo "$ay >= $G" | bc) -gt 0 ]; then
            rotate inverted
            "$BASEDIR/landscape"
            state=inverted
        elif ([ "$state" != left ] || [ "$current" != left ] || $first) && [ $(echo "$ax >= $G" | bc) -gt 0 ]; then
            rotate left
            "$BASEDIR/portrait"
            state=left
        fi
    else
        ([ "$state" == "$current" ] && ! $first) && { sleep 1; continue; }
        if ([ "$current" != normal ] || $first) && [ "$state" == normal ]; then
            rotate normal
            "$BASEDIR/landscape"
            state=normal
        elif ([ "$current" != right ] || $first) && [ "$state" == right ]; then
            rotate right
            "$BASEDIR/portrait"
            state=right
        elif ([ "$current" != inverted ] || $first) && [ "$state" == inverted ]; then
            rotate inverted
            "$BASEDIR/landscape"
            state=inverted
        elif ([ "$current" != left ] || $first) && [ "$state" == left ]; then
            rotate left
            "$BASEDIR/portrait"
            state=left
        fi
    fi
    first=false
    sleep 1
done

) 9>"$LOCKFILE"

